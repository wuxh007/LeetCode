322. 零钱兑换
给你一个零钱数组coins，表示不同的面额的硬币；以及一个零钱，总金额amout
并返回可以凑成总金额计算所需的最少数目。如果没有任何一种硬币组合总金额，则返回-1
你可以认为每种硬币的数量是无限的。
示例 1：
输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1

示例 2：
输入：coins = [2], amount = 3
输出：-1

示例 3：
输入：coins = [1], amount = 0
输出：0

示例 4：
输入：coins = [1], amount = 1
输出：1

示例 5：
输入：coins = [1], amount = 2
输出：2
 

提示：

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104


参考代码：
class Solution {
    public int coinChange(int[] coins, int amount) {
        int max=Integer.MAX_VALUE;
        int []dp=new int[amount+1];
        for(int j=0;j<dp.length;j++){
            dp[j]=max;
        }
        dp[0]=0;
        for(int i=0;i<coins.length;i++){
            for(int j=coins[i];j<=amount;j++){
                if(dp[j-coins[i]]!=max){
                    dp[j]=Math.min(dp[j],dp[j-coins[i]]+1);
                }
            }
        }
       return dp[amount]==max?-1:dp[amount];
    }
}

总结：题是二刷了，但是对动态规划的思路则是进一步的理解，首先明确dp数组以及下标的含义
然后推导出正确的递推公式，我的理解是多用几个例子试一下，确保准确性；
然后初始化dp数组，一定要小心再小心
决定遍历顺序，确定内外循环的内容
最后输出需要的结果
